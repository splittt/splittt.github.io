{"version":3,"sources":["logo.svg","components/Dashboard.jsx","components/Play.jsx","components/Teacher.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Dashboard","props","Play","id","useParams","useState","room","changeRoom","activityUserRef","changeActivityUserRef","useEffect","user","handleRoomLoaded","db","firebase","firestore","collection","add","timestamp","FieldValue","serverTimestamp","then","doc","update","activitiesUsers","arrayUnion","get","exists","console","log","data","catch","error","err","enterRoom","roomData","ready","filter","v","players","getColumnAndRowsNumbers","length","cols","rows","wierd","Grid","columns","divided","Row","Array","apply","map","m","i","Column","Image","src","userData","activity","changeActivity","Form","onSubmit","changeUserData","Field","userName","Dropdown","placeholder","fluid","search","selection","onChange","e","value","floor","Input","name","Group","inline","Checkbox","checked","visibleName","visibleFlat","Button","type","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","changeUser","confirmed","changeConfirmed","cookieReact","changeCookieReact","exact","path","onClick","document","cookie","serialize","slides","Modal","open","Header","Content","active","Teacher","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","registration","unregister","message"],"mappings":"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","file":"static/js/main.f0fe141d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React,{useState} from 'react';\r\n\r\nfunction Dashboard (props) {\r\n\r\n    return (<div>EL DASHBOARDDDD</div>)\r\n}\r\nexport default Dashboard","import React,{useState, useEffect } from 'react';\r\nimport { Grid, Image } from 'semantic-ui-react'\r\nimport { useParams } from \"react-router-dom\";\r\nimport firebase from 'firebase'\r\n\r\nconst enterRoom = (user, id, handleRoomLoaded)=>{\r\n    let db = firebase.firestore()\r\n    db.collection('activityUser').add({\r\n        user:user,\r\n        timestamp: firebase.firestore.FieldValue.serverTimestamp()\r\n    }).then((activityUserRef)=>{\r\n        let room = db.collection('rooms').doc(id)\r\n        room.update({\r\n            activitiesUsers:firebase.firestore.FieldValue.arrayUnion(activityUserRef)\r\n        }).then(()=>{\r\n            room.get().then(function(doc) {\r\n                if (doc.exists) {\r\n                    console.log(\"Document data:\", doc.data());\r\n                    handleRoomLoaded(doc.data(), activityUserRef)\r\n                } else {\r\n                    // doc.data() will be undefined in this case\r\n                    console.log(\"No such document!\");\r\n                }\r\n            }).catch(function(error) {\r\n                console.log(\"Error getting document:\", error);\r\n            });\r\n\r\n        },(err)=>{\r\n            console.log('error')\r\n        })        \r\n    })\r\n}\r\n\r\nconst getColumnAndRowsNumbers = (players)=>{\r\n    switch(players) {\r\n        case 1:\r\n            return [1,1,0]\r\n        case 2:\r\n            return  [2,1, 0]\r\n        case 3:\r\n            return  [3,1, 0]\r\n        case 4:\r\n            return  [2,2, 0]\r\n        case 5:\r\n            return [3, 2, 1]\r\n        case 6:\r\n            return  [3,2, 0]\r\n        case 7:\r\n            return [3,3,2]\r\n        case 8:\r\n            return [3,3,1]\r\n        case 9:\r\n            return [3,3,0]\r\n        case 10:\r\n            return [4,3,2]\r\n        case 11:\r\n            return [4,3,1]\r\n        case 12:\r\n            return [4,3,0]\r\n        }\r\n}\r\n\r\n\r\n\r\nfunction Play (props) {\r\n    let { id } = useParams();\r\n    \r\n    const [room, changeRoom] = useState(null)\r\n    const [activityUserRef, changeActivityUserRef] = useState(null)\r\n\r\n    useEffect(()=>{\r\n        enterRoom(props.user, id, (roomData, activityUserRef)=>{\r\n            changeRoom(roomData)\r\n            changeActivityUserRef(activityUserRef)\r\n        })\r\n    }, [props.id])\r\n    const ready = activityUserRef && room\r\n    const otherActivities = ready ? room.activitiesUsers.filter((v)=>v==activityUserRef): null\r\n    let players = 7\r\n    const [cols, rows, wierd] = ready ? getColumnAndRowsNumbers(room.activitiesUsers.length) : [null,null,null]\r\n    return (\r\n        <>\r\n        {ready && <div>{room.activitiesUsers.length}</div>}\r\n        {ready &&\r\n            (<Grid columns={cols} divided>\r\n                {wierd==2 &&\r\n                    <Grid.Row>\r\n                    {Array.apply(null, Array(cols-1)).map((m, i)=>(\r\n                        <Grid.Column>\r\n                            <Image src='https://react.semantic-ui.com/images/wireframe/media-paragraph.png' />\r\n                        </Grid.Column>\r\n                    ))}  \r\n                    </Grid.Row>\r\n                }\r\n                {rows>2 && Array.apply(null, Array(rows-wierd)).map((m, i)=>(\r\n                    <Grid.Row>\r\n                    {Array.apply(null, Array(cols)).map((m, i)=>(\r\n                        <Grid.Column>\r\n                            <Image src='https://react.semantic-ui.com/images/wireframe/media-paragraph.png' />\r\n                        </Grid.Column>\r\n                    ))}\r\n                    </Grid.Row>\r\n                ))}\r\n                {wierd>=1 &&\r\n                    <Grid.Row>\r\n                    {Array.apply(null, Array(cols-1)).map((m, i)=>(\r\n                        <Grid.Column>\r\n                            <Image src='https://react.semantic-ui.com/images/wireframe/media-paragraph.png' />\r\n                        </Grid.Column>\r\n                    ))}  \r\n                    </Grid.Row>\r\n                }\r\n            </Grid>)}\r\n        {<div>Loading...</div>}\r\n        </>)\r\n}\r\nexport default Play","import React, {useState} from 'react'\r\n// import { Button, Checkbox, Form, Dropdown } from 'semantic-ui-react'\r\nimport {\r\n    Button,\r\n    Form\r\n  } from 'semantic-ui-react'\r\nconst saveActivity = (dataActivity)=>{\r\n\r\n}\r\nfunction Dashboard (props) {\r\n    const [activity, changeActivity] = useState({...props.userData})\r\n    return (<Form onSubmit={()=>props.changeUserData(activity)}>\r\n            <Form.Field>\r\n            <label>Benvingut {activity.userName?' '+activity.userName:null}!</label>\r\n            <Form.Dropdown\r\n                placeholder='Pis'\r\n                fluid\r\n                search\r\n                selection\r\n                // options={possibleFloors}\r\n                onChange={(e, {value})=>changeActivity({...activity, floor:value})}\r\n            />\r\n            <Form.Input placeholder='Teacher user' onChange={(e, {value})=>changeActivity({...activity,name:value})}/>\r\n            </Form.Field>\r\n            <Form.Field>\r\n            <Form.Dropdown\r\n                placeholder='Pis'\r\n                fluid\r\n                search\r\n                selection\r\n                // options={possibleFloors}\r\n                onChange={(e, {value})=>changeActivity({...activity, floor:value})}\r\n            />\r\n            </Form.Field>\r\n            \r\n            {<Form.Group inline>\r\n                <label>VizName</label>\r\n                <Form.Checkbox\r\n                    checked={activity.visibleName}\r\n                    onChange={(e, {value})=>changeActivity({...activity,visibleName:value})}\r\n                />\r\n                <label>VizPis</label>\r\n                <Form.Checkbox\r\n                    checked={activity.visibleFlat}\r\n                    onChange={(e, {value})=>changeActivity({...activity, visibleFlat:value})}\r\n                />\r\n            </Form.Group>}\r\n            \r\n            <Form.Field>\r\n            </Form.Field>\r\n            <Button type='submit'>Submit</Button>\r\n        </Form>)\r\n}\r\nexport default Dashboard","import React, {useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Modal, Input, Button } from 'semantic-ui-react'\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\nimport firebase from 'firebase'\nimport Dashboard from './components/Dashboard'\nimport Play from './components/Play'\nimport Teacher from './components/Teacher'\nimport cookie from 'cookie'\nconst firebaseConfig  ={\n  apiKey: \"AIzaSyAXuYMUodZvHzxgJKqzr5OFX32G0YH_pX4\",\n  authDomain: \"split-games.firebaseapp.com\",\n  databaseURL: \"https://split-games.firebaseio.com\",\n  projectId: \"split-games\",\n  storageBucket: \"split-games.appspot.com\",\n  messagingSenderId: \"39941079391\",\n  appId: \"1:39941079391:web:0ddd79b690167fb3ddf6ea\"\n}\nfirebase.initializeApp(firebaseConfig)\nfunction App() {\n  const [user, changeUser] = useState(null)\n  const [confirmed, changeConfirmed] = useState(true)\n  const [cookieReact, changeCookieReact] = useState(0)\n  // useEffect(()=>{\n  //   changeCookieReact(cookie.parse(document.cookie).slides)\n  // })\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <iframe></iframe>\n          <button onClick={()=>{changeCookieReact(cookieReact+1);document.cookie=cookie.serialize('slides', cookieReact+1)}}>set cookie</button>\n          {document.cookie.slides}\n          {`${cookieReact}`}\n        </Route>\n        <Route path=\"/provaslides\">\n          hey {document.cookie.slides}\n          {`${cookieReact}`}\n        </Route>\n        <Route path=\"/play/:id\">\n          {!confirmed? (\n              <Modal open={!confirmed}>\n                <Modal.Header>Benvinguda a Split!</Modal.Header>\n                <Modal.Content>\n                  <Input placeholder=\"Nom d'usuari\" onChange={(e,{value})=>changeUser(value)} value={user}></Input>\n                  <br/>\n                  <Button active={user!=null} onClick={()=>{changeConfirmed(true)}}>A jugar!</Button>\n                </Modal.Content>\n              </Modal>\n            ):<Play user={'prova'}></Play>}\n        </Route>\n        <Route path=\"/teacher\">\n            <Teacher></Teacher>\n        </Route>\n        <Route path=\"dashboard\">\n          <Dashboard user={user}></Dashboard>\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}